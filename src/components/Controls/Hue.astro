---
import Flex from '@components/utility/Flex.astro';
import Controls from './Controls.astro';
import InputRange from './InputRange.astro';
---

<Controls>
  <InputRange title="Hue Primary" name="hue-primary" min={0} max={360} />
  <InputRange title="Distance" name="hue-angle" min={0} max={360} />
  <InputRange title="Gray chroma" name="primary-into-gray" min={0} max={1} step={0.1} />
  <div slot="decoration">
    <div class="wheel">
      <div class="wheel-indicator"></div>
      <div class="wheel-point" data-hue="primary"></div>
      <div class="wheel-point" data-hue="secondary"></div>
      <div class="wheel-point" data-hue="tertiary"></div>
    </div>
  </div>
</Controls>

<style>
  .wheel {
    --_size: 3.5rem;
    --_point-size: 1ch;
    @container controls (width < 700px) {
      --_size: 5rem;
      --_point-size: 1rem;
      align-self: center;
    }
    display: block;
    width: var(--_size);
    height: var(--_size);
    aspect-ratio: 1;
    border-radius: 50%;
    box-shadow: inset 0px 0px 0px var(--_point-size) var(--gray-200);
    position: relative;
  }

  .wheel-point {
    --angle: calc(var(--hue-primary) * 1deg);
    --point-size: var(--_point-size);
    --radius: calc((var(--_size) / 2) - (var(--point-size) / 2));
    --x: calc(var(--radius) * cos(var(--angle)));
    --y: calc(var(--radius) * sin(var(--angle)));

    position: absolute;
    transform: translateX(calc(var(--radius) + var(--x))) translateY(calc(var(--radius) + var(--y)));
    background-color: var(--_color, currentColor);
    width: var(--point-size);
    height: var(--point-size);
    border-radius: 50%;
    box-shadow: 1px 1px 0px 0px var(--jb-box-shadow-color);
    border: 1px solid var(--jb-box-shadow-color);
  }

  .wheel-point[data-hue='primary'] {
    --angle: calc(var(--hue-primary) * 1deg);
    --_color: var(--primary-400);
  }
  .wheel-point[data-hue='secondary'] {
    --angle: calc(var(--hue-secondary) * 1deg);
    --_color: var(--secondary-400);
  }
  .wheel-point[data-hue='tertiary'] {
    --angle: calc(var(--hue-tertiary) * 1deg);
    --_color: var(--tertiary-400);
  }
</style>

<script>
  import { overrideCSSProperties, type SettingsValue } from 'src/store';

  function setPropertyAndValue(inputName: string, cssVariable: keyof SettingsValue) {
    const input = document.querySelector(`input[name="${inputName}"]`) as HTMLInputElement;

    const output = document.querySelector(`output[for="${inputName}"]`) as HTMLInputElement;

    if (!input && !output) return;

    input.value = overrideCSSProperties.get()[cssVariable];
    output.value = overrideCSSProperties.get()[cssVariable];

    input.addEventListener('input', (event) => {
      const target = event.target as HTMLInputElement;
      overrideCSSProperties.setKey(cssVariable, target.value);
      output.value = target.value;
    });
  }
  document.addEventListener('astro:page-load', () => {
    setPropertyAndValue('hue-primary', '--hue-primary');
    setPropertyAndValue('hue-angle', '--hue-angle');
    setPropertyAndValue('primary-into-gray', '--gray-multiplier');
  });
</script>

<script is:inline>
  // https://docs.astro.build/en/guides/view-transitions/#astrobefore-swap
  // add some global thingie and set it on the SiteLayout, mebbeh.
  /* const properties = {
    primary: "--hue-primary",
    angle: "--hue-angle",
  };

  function setPropertyAndValue(inputName, propertyName) {
    const input = document.querySelector(`input[name="${inputName}"]`);
    const output = document.querySelector(`output[for="${inputName}"]`);
    const root = getComputedStyle(document.documentElement);

    input.value = root.getPropertyValue(propertyName);

    input.addEventListener("input", (event) => {
      document.documentElement.style.setProperty(
        propertyName,
        event.target.value
      );
      output.value = event.target.value;
    });
  }

  setPropertyAndValue("hue", properties.primary);
  setPropertyAndValue("angle", properties.angle); */
</script>
