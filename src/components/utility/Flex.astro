---
import type { HTMLTag, Polymorphic } from "astro/types";

const flex = {
  gap: ["none", "3xs", "2xs", "xs", "s", "m", "l", "xl", "gutter"],
  justifyContent: ["between", "center", "around", "start", "end"],
  alignItems: ["center", "start", "end", "baseline"],
  direction: ["column", "row"],
  grow: ["1"],
} as const;

type Flex = typeof flex;

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag;
  gap?: Flex["gap"][number];
  justifyContent?: Flex["justifyContent"][number];
  alignItems?: Flex["alignItems"][number];
  direction?: Flex["direction"][number];
  grow?: Flex["grow"][number];
}>;

const {
  as: Tag = "div",
  class: providedProps,
  gap,
  justifyContent,
  alignItems,
  direction,
  grow,
  ...props
} = Astro.props;

//const componentClasses = `gap-${gap} justify-${justifyContent} align-${alignItems} direction-${direction} grow-${grow} flex`;

const componentClasses = [
  [gap, `gap-${gap}`],
  [justifyContent, `justify-${justifyContent}`],
  [alignItems, `align-${alignItems}`],
  [direction, `direction-${direction}`],
  [grow, `grow-${grow}`],
  [true, `flex`],
].filter(([yes]) => Boolean(yes));
---

<Tag {...props} class:list={[componentClasses, providedProps]}>
  <slot />
</Tag>

<style>
  .flex {
    display: flex;
  }

  .gap-none {
    gap: 0;
  }
  .gap-l {
    gap: var(--space-l);
  }
  .gap-xl {
    gap: var(--space-xl);
  }
  .gap-m {
    gap: var(--space-m);
  }
  .gap-s {
    gap: var(--space-s);
  }
  .gap-xs {
    gap: var(--space-xs);
  }
  .gap-2xs {
    gap: var(--space-2xs);
  }
  .gap-3xs {
    gap: var(--space-3xs);
  }
  .gap-gutter {
    gap: var(--grid-gutter);
  }

  .align-baseline {
    align-items: baseline;
  }
  .align-center {
    align-items: center;
  }

  .align-start {
    align-items: flex-start;
  }

  .align-end {
    align-items: flex-end;
  }

  .justify-between {
    justify-content: space-between;
  }

  .justify-around {
    justify-content: space-around;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-start {
    justify-content: flex-start;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .direction-column {
    flex-direction: column;
  }

  .direction-row {
    flex-direction: row;
  }

  .grow-1 {
    flex-grow: 1;
  }
</style>
