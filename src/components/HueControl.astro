---
import Flex from "./utility/Flex.astro";
const hue = "185";
const angle = "280";
---

<div class="controls">
  <Flex class="control-wrapper" grow="1">
    <Flex
      class="control-group"
      gap="2xs"
      grow="1"
      alignItems="baseline"
      direction="column"
    >
      <Flex justifyContent="between" style="width: 100%" alignItems="baseline">
        <label for="hue">Primary Hue</label>
        <output for="hue">{hue}</output>
      </Flex>
      <input
        id="hue"
        name="hue"
        type="range"
        max="360"
        value={hue}
        min="0"
        step="1"
      />
    </Flex>

    <Flex
      class="control-group"
      gap="2xs"
      grow="1"
      alignItems="baseline"
      direction="column"
    >
      <Flex justifyContent="between" style="width: 100%" alignItems="baseline">
        <label for="angle">Distance</label>
        <output for="angle">{angle}</output>
      </Flex>
      <input
        id="angle"
        name="angle"
        type="range"
        max="360"
        value={angle}
        min="0"
        step="1"
      />
    </Flex>
  </Flex>
  <div class="wheel">
    <div class="wheel-indicator"></div>
    <div class="wheel-point" data-hue="primary"></div>
    <div class="wheel-point" data-hue="secondary"></div>
    <div class="wheel-point" data-hue="tertiary"></div>
  </div>
</div>

<style>
  .controls {
    width: 100%;
    display: flex;
    gap: var(--space-xs);
    position: sticky;
    top: var(--space-xs);
    padding: var(--space-2xs) var(--space-xs);
    z-index: 100;
    border: 2px solid var(--primary-950);
    border-radius: var(--radius-2);
    background-color: var(--primary-1000);
    container-type: inline-size;
    container-name: controls;

    --shadow-color: color-mix(in oklch, var(--primary-1000) 60%, transparent);
    box-shadow:
      1px 4px 25px 12px var(--shadow-color),
      1px 1px 6px 3px var(--shadow-color);
  }

  .control-wrapper {
    flex-direction: column;
    gap: var(--space-xs);
    @container controls (width > 700px) {
      flex-direction: row;
    }
  }

  output {
    width: 5ch;
    text-align: right;
    font-family: var(--font-monospace);
    color: var(--secondary-200);
  }

  .wheel {
    --_size: 3.5rem;
    --_point-size: 1ch;
    @container controls (width < 700px) {
      --_size: 6rem;
      --_point-size: 2ch;
    }
    display: block;
    width: var(--_size);
    height: var(--_size);
    aspect-ratio: 1;
    border-radius: 50%;
    box-shadow: inset 0px 0px 0px var(--_point-size) var(--primary-950);
    position: relative;
  }

  .wheel-point {
    --angle: calc(var(--hue-primary) * 1deg);
    --point-size: var(--_point-size);
    --radius: calc((var(--_size) / 2) - (var(--point-size) / 2));
    --x: calc(var(--radius) * cos(var(--angle)));
    --y: calc(var(--radius) * sin(var(--angle)));

    position: absolute;
    transform: translateX(calc(var(--radius) + var(--x)))
      translateY(calc(var(--radius) + var(--y)));
    background-color: var(--_color, currentColor);
    width: var(--point-size);
    height: var(--point-size);
    border-radius: 50%;
  }

  .wheel-point[data-hue="primary"] {
    --angle: calc(var(--hue-primary) * 1deg);
    --_color: var(--primary-400);
  }
  .wheel-point[data-hue="secondary"] {
    --angle: calc(var(--hue-secondary) * 1deg);
    --_color: var(--secondary-400);
  }
  .wheel-point[data-hue="tertiary"] {
    --angle: calc(var(--hue-tertiary) * 1deg);
    --_color: var(--tertiary-400);
  }

  input[type="range"] {
    unset: all;
    user-select: none;
    -webkit-tap-highlight-color: transparent;
    appearance: none;
    display: inline-block;
    width: 100%;
    cursor: pointer;
    background: transparent;
  }

  input[type="range"]::-webkit-slider-thumb {
    border: none;
    height: 1rem;
    width: 2rem;
    border-radius: 6px;
    background: #dadada;
    cursor: pointer;
    -webkit-appearance: none;
    margin-top: -0.2rem;
    box-shadow: 0px 0px 6px 4px var(--primary-1000);
  }

  input[type="range"]::-webkit-slider-runnable-track {
    height: 0.6rem;
    width: 90%;
    /* background-color: tomato; */
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 4 4' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='1' height='1' x='0' y='0' fill='white' /%3E%3C/svg%3E");
    background-size: 4px 4px;
    background-repeat: repeat;
    color: white;
  }
</style>

<script is:inline>
  const properties = {
    primary: "--hue-primary",
    angle: "--hue-angle",
  };
  const hue = document.querySelector('input[name="hue"]');
  const root = getComputedStyle(document.documentElement);
  hue.value = root.getPropertyValue(properties.primary);
  hue.addEventListener("input", (event) => {
    document.documentElement.style.setProperty(
      properties.primary,
      event.target.value
    );
    document.querySelector('output[for="hue"]').value = event.target.value;
  });

  const angle = document.querySelector('input[name="angle"]');
  angle.value = root.getPropertyValue(properties.angle);
  angle.addEventListener("input", (event) => {
    document.documentElement.style.setProperty(
      properties.angle,
      event.target.value
    );
    document.querySelector('output[for="angle"]').value = event.target.value;
  });
</script>
