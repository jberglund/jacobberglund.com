---
import HueControl from '@components/Controls/Hue.astro';
import CSSSupport from '../../components/CSS/CSSSupport.astro';
import SiteLayout from '../../layouts/SiteLayout.astro';
import Noise from '@components/Controls/NoiseFilter.astro';

const palettes = ['primary', 'secondary', 'tertiary', 'gray'];

const paletteValues = [
  '50',
  '100',
  '200',
  '300',
  '400',
  '500',
  '600',
  '700',
  '800',
  '900',
  '950',
  '1000',
];
---

<SiteLayout>
  <ok-stack gap="xl" data-space="m">
    <div class="typeset" style="margin-top: var(--space-xl)">
      <h1 class="h4">Welcome to the lab!</h1>
      <p>
        This is my workbench for mad science. Come to think of it, this whole site is one big
        experiment
      </p>
      <p>And this page is a demonstration of how it all works. First out is:</p>
      <h3 class="h4">Colors</h3>
      <p>Now that the introdutions has been covered, let's adjourn to the study.</p>
      <p>
        D'you know of <a
          class="link"
          href="https://www.interaction-design.org/literature/topics/color-theory">color theory</a
        >?. I do, but am positively horrendous at picking colors. So, of course, I made a color
        system instead.
      </p>
      <CSSSupport test={'color: oklch(100% 1 150)'} />
      <p>
        If you checked the link above about Color Theory, or if you already know some you might be
        familiar with Analogous, Triadic, Compound Harmony, or Complementary. Which is fancy speak
        for the different relationships between colors on a color wheel. Again, I won't pretend to
        be knowledable beyond the basics.
      </p>
      <p>
        Anyway, this system should be able to either give you some indication of how it works. Here,
        give it a whirl:
      </p>
    </div>
    <HueControl />
    <div class="palettes u-full">
      <div class="palette">
        <div class="swatch-name swatch-title"></div>
        {paletteValues.map((value) => <div class="swatch-name">{value}</div>)}
      </div>
      {
        palettes.map((palette) => (
          <div class="palette">
            <div class="swatch swatch-title">{palette}</div>
            {paletteValues.map((value) => (
              <div class="swatch" style={`--swatch: var(--${palette}-${value})`} />
            ))}
          </div>
        ))
      }
    </div>

    <!-- <div>
      <h2 class="h5">Features featured on this site:</h2>
      <CSSSupport test={"text-wrap: balance"} />
      <CSSSupport test={"text-wrap: pretty"} />
      <CSSSupport test={"color: oklch(100% 0 0)"} />
      <CSSSupport test={"content-visibility: visible"} />
      <CSSSupport test={"grid-column: subgrid"} />
      <CSSSupport test={"-webkit-box-decoration-break: clone"} />
      <CSSSupport test={"selector(&)"} />

      <h2 class="h5">Looking to try out:</h2>
      <CSSSupport test={"view-transition-name: are-we-there-yet"} />
      <CSSSupport test={"text-box-edge: ex alphabetic"} />
      <CSSSupport
        test={"offset: path('M 100 100 L 300 100 L 200 300 z') auto"}
      />
      <CSSSupport test={"translate: calc(cos(30deg) * 10vmin)"} />
      <CSSSupport test={"translate: calc(sin(30deg) * 100svh)"} />
    </div> -->

    <!-- <Noise /> -->
    <div class="gradients u-full">
      <div class="gradient" data-variant="1"></div>
      <div class="gradient" data-variant="2"></div>
      <div class="gradient" data-variant="3"></div>
    </div>
  </ok-stack>
</SiteLayout>
<style>
  .cards {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: max-content;
    gap: var(--space-m);
  }
  .card {
    display: grid;
    gap: 1ch;
    border-radius: 10px;
    background: var(--surface-2);
    border: 1px solid var(--surface-3);
    padding: 1rem;
  }
  small {
    color: var(--text-2);
  }

  .palettes {
    display: grid;
    gap: var(--space-3xs);
    justify-content: center;
    grid-template-columns: max-content repeat(4, minmax(var(--space-xl), 1fr));
    grid-template-rows: max-content repeat(12, minmax(var(--space-m), auto));
    container-type: inline-size;
  }

  .palette {
    width: 100%;
    display: grid;
    grid-column: span 1;
    grid-row: 1 / -1;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
  }

  .swatch {
    background-color: var(--swatch);
    padding: var(--space-3xs);
    border-radius: var(--radius-1);
  }

  .swatch-title {
    display: flex;
    align-items: flex-end;
    justify-content: center;
    padding: var(--space-3xs);

    @container (width < 500px) {
      writing-mode: tb-rl;
      align-self: end;
    }
  }

  .swatch-name {
    text-align: right;
  }

  .gradients {
    display: flex;
    /* flex-direction: column; */
    gap: var(--space-l);
  }

  .gradient {
    flex-grow: 1;
    aspect-ratio: 3/4;
    border-radius: var(--radius-3);
    background-color: #4158d0;
    overflow: hidden;
    /* filter: url(#noise-filter2) brightness(1.3); */
    background-image: linear-gradient(
      43deg,
      var(--_start, var(--primary-600)) 0%,
      var(--_center, var(--secondary-400)) 46%,
      var(--_stop, var(--tertiary-200)) 100%
    );
  }

  .gradient[data-variant='2'] {
    --_start: var(--primary-300);
    --_center: var(--tertiary-400);
    --_stop: var(--secondary-600);
  }

  .gradient[data-variant='3'] {
    --_start: var(--primary-300);
    --_center: var(--tertiary-400);
    --_stop: var(--secondary-600);

    background: radial-gradient(
      circle at -30% -30%,
      var(--_start, var(--tertiary-600)) 0%,
      var(--_center, var(--secondary-400)) 46%,
      var(--_stop, var(--primary-100)) 100%
    );
  }

  .radial-gradient {
    background: radial-gradient(
      circle at -40px 40px,
      var(--secondary-400) 0%,
      var(--color-background) 66%
    );
    width: 80vw;
    height: 80vw;
    opacity: 0.6;
  }
</style>
