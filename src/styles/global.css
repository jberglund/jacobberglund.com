@import url("media-queries.css");
@import url("reset.css");
@import url("fonts.css");
@import url("variables.css");
@import url("grid.css");

html {
  background-color: var(--color-background);
  color: var(--color-text);
  caret-color: var(--color-primary);
}

@media (--no-reduced-motion) {
  html {
    scroll-behavior: smooth;
  }
}

html {
  --scrollbar-foreground: #999;
  --scrollbar-background: #333;
  scrollbar-color: var(--scrollbar-foreground) var(--scrollbar-background);
}

::-webkit-scrollbar {
  width: 10px; /* for vertical */
  height: 10px; /* for horizontal */
}
::-webkit-scrollbar-thumb {
  background: var(--scrollbar-foreground);
}
::-webkit-scrollbar-track {
  background: var(--scrollbar-background);
}

pre {
  width: 100%;
}
table,
pre {
  width: 100%;
  max-width: 90vw;
  overflow-x: scroll;
}

html {
  font-size: var(--step-0);
}

body {
  margin: 0;
  padding: 0;
  display: grid;
  font-family: "Epilogue", sans-serif;
  font-weight: 350;
  word-wrap: break-word;
  overflow-wrap: break-word;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

:is(h1, h2, h3, h4, h5, h6) {
  font-weight: 500;
  line-height: 1.1;
  letter-spacing: -0.01em;
}

h1,
.h1 {
  font-size: var(--step-4);
}

h2,
.h2 {
  font-size: var(--step-3);
}

h3,
.h3 {
  font-size: var(--step-3);
}

h4,
.h4 {
  font-size: var(--step-2);
}

h5,
.h5 {
  font-size: var(--step-2);
}

h6,
.h6 {
  font-size: var(--step-1);
}

p,
ul,
ol {
  line-height: 1.5;
  margin: var(--space-2xs) 0;
  text-wrap: pretty;
}

ol,
ul {
  padding-left: var(--space-s);
}

ol {
  list-style: decimal-leading-zero;
}

li {
  margin: var(--space-2xs) 0;
}

li p {
  margin-bottom: var(--space-xs);
  margin-top: var(--space-xs);
}

a {
  color: inherit;
  transition: color linear 0.15s;

  text-decoration-color: blue;
  text-decoration: none;
}

a:hover {
  color: var(--primary-color);
}

p a {
  color: white;
  text-decoration: underline;
  text-decoration-color: var(--primary-color);
  font-weight: 600;
  outline-offset: var(--spacing-8);
  outline-color: transparent;
}

:focus-visible {
  outline: 3px solid var(--primary-color);
  outline-offset: var(--space-2xs);
  border-radius: 12px;
}

p a:hover {
  box-shadow: inset 0 -1.5em 0 var(--primary-color);
  color: #fff;
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: middle;
  font-style: italic;
  background-repeat: no-repeat;
  background-size: cover;
  shape-margin: 0.75rem;
}

hr {
  --background-pattern: url('data:image/svg+xml;utf8,<svg width="4" height="4" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h1v1H0z" fill="%23fff" fill-rule="evenodd"/></svg>');
  width: 100%;
  padding: 0;
  border: 0;
  height: var(--space-s);
  margin: var(--space-m) auto;
  background-image: var(--background-pattern);
  background-repeat: repeat;
}

code {
  font-family: "Berkeley Mono", SF Mono, monospace;
  /* font-size: var(--step-0); */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  position: relative;
  display: inline;

  border-radius: var(--radius-2);
  -webkit-box-decoration-break: clone;
}

p code {
  background: rgba(115, 125, 140, 0.17);
  letter-spacing: -0.5px;
  padding: 4.5px 6px;
  margin: 1px -1px;
}

pre {
  margin-block: var(--space-s);
  padding: var(--space-s);
  grid-column: 2 / span 10;
  border: 4px solid rgb(255 255 255 / 10%);
  border-radius: var(--radius-3);
  grid-column: 2 / span 10;
  @media (--small) {
    grid-column: 1 / span 12;
  }
}

pre code {
  padding: 0;
}

blockquote {
  border-left: 4px solid #cccccc;
  font-size: 1.4em;
  font-style: italic;
  margin: var(--space-s) 0;
  padding-left: var(--space-m);
  padding-right: var(--space-m);
}

:where(.u-grid) blockquote {
  grid-column: 2 / span 10;
}

figure {
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  -webkit-margin-start: 0;
  -webkit-margin-end: 0;
  margin: 0 0 var(--space-xl);
}

.sr-only {
  border: 0;
  padding: 0;
  margin: 0;
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  white-space: nowrap;
}

.prose {
  --space-l1-lg: 4rem;
  --space-l2-lg: 3rem;
  --space-l3-lg: 2.5rem;
  --space-l4-lg: 2rem;
  --space-l5-lg: 1.5rem;
  --space-l6-lg: 1rem;

  --space-l1-sm: calc(var(--space-l1-lg) / 4);
  --space-l2-sm: calc(var(--space-l2-lg) / 4);
  --space-l3-sm: calc(var(--space-l3-lg) / 4);
  --space-l4-sm: calc(var(--space-l4-lg) / 4);
  --space-l5-sm: calc(var(--space-l5-lg) / 4);
  --space-l6-sm: calc(var(--space-l6-lg) / 4);

  /* & :is(h1, h2, h3, h4, h5, h6) {
    margin-top: var(--space-m);
  } */
  h2 {
    font-size: var(--step-2);
  }
  h3 {
    font-size: var(--step-1);
  }
  h4 {
    font-size: var(--step-1);
  }
  h5,
  h6 {
    font-size: var(--step0);
  }

  /* Non-heading elements should have a big gap after them if followed by a heading. */
  /* Star selector means that a bunch of stuff should "just work", */
  /* e.g. if you insert images or other elements between text nodes. */
  /* But you could change the `*` to `:is(h1,h2,h3,h4,h5,h6)` if you don't want that. */
  *:has(+ h2) {
    margin-bottom: var(--space-l2-lg);
  }
  *:has(+ h3) {
    margin-bottom: var(--space-l3-lg);
  }
  *:has(+ h4) {
    margin-bottom: var(--space-l4-lg);
  }
  *:has(+ h5) {
    margin-bottom: var(--space-l5-lg);
  }
  *:has(+ h6) {
    margin-bottom: var(--space-l6-lg);
  }

  /* Headings followed immediately by a heading of a level down */
  /* should have only a small gap below. */
  /* Using :where() for consistent specificity. */
  :where(h1):has(+ h2) {
    margin-bottom: var(--space-l1-sm);
  }
  :where(h2):has(+ h3) {
    margin-bottom: var(--space-l2-sm);
  }
  :where(h3):has(+ h4) {
    margin-bottom: var(--space-l3-sm);
  }
  :where(h4):has(+ h5) {
    margin-bottom: var(--space-l4-sm);
  }
  :where(h5):has(+ h6) {
    margin-bottom: var(--space-l5-sm);
  }

  /* List item spacing. */
  :where(li):has(+ li) {
    margin-bottom: var(--space-list-items);
  }

  /* Nested list spacing. */
  /* This is the only place we need to use margin-top :'( */
  :where(li) :is(ul, ol) {
    margin-top: var(--space-list-items);
  }

  /* Remove the bottom margin on the last prose element */
  /* (i.e. if it has no next sibling). */
  /* Could there be an argument to apply this to ALL elements (*) with no next sibling? */
  :is(p, ul, ol, h1, h2, h3, h4, h5, h6):not(:has(+ *)) {
    margin-bottom: 0;
  }
}
